// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  username  String    @unique
  email     String    @unique
  password  String?
  avatar    String    @default("https://img.freepik.com/free-psd/3d-illustration-person-with-sunglasses_23-2149436188.jpg?size=338&ext=jpg&ga=GA1.1.2008272138.1722988800&semt=ais_hybrid")
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now())
  posts     Post[]
  comments  Comment[]
  upvotes   Upprove[]
  likes     Like[]
}

model Post {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  image     String?
  title     String
  slug      String    @unique
  desc      String
  comments  Comment[]
  upvotes   Upprove[]
  author    User?     @relation(fields: [authorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  authorId  String?   @db.ObjectId
  category  String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Upprove {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  postId    String   @db.ObjectId
  userId    String   @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([postId, userId])
}

model Like {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  comment   Comment @relation(fields: [commentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  commentId String  @db.ObjectId
  author    User    @relation(fields: [authorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  authorId  String  @db.ObjectId

  @@unique([commentId, authorId])
}

model Comment {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  message   String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  author    User?     @relation(fields: [authorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  authorId  String?   @db.ObjectId
  post      Post?     @relation(fields: [postId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  postId    String?   @db.ObjectId
  parent    Comment?  @relation("parentChild", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  children  Comment[] @relation("parentChild")
  parentId  String?   @db.ObjectId
  likes     Like[]
}
